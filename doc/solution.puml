@startuml
title Modello del Dominio della Soluzione

package Control {
    class Controller {
        - accessoAmministratore: boolean
    }

    class utente {

    }

    class amministratore {

    }

    Controller +-- utente
    Controller +-- amministratore
    utente <|-r- amministratore
}

package GUI {
    class MainView {
        + MainView(Controller)
        + select(MainView.Tab)
        + set(MainView.Visualization)
        + getAccediView(): AccediView
        + getListaCalciatoriView(): ListaCalciatoriView
        + getAggiungiView(): AggiungiView
        + displayError(String)
    }

    class AccediView {
        + AccediView(Controller)
    }

    class ProfiloView {
        + ProfiloView(Controller)
    }

    class ListaCalciatoriView {
        + ListaCalciatoriView(Controller)
        + setList(List<Calciatore>)
        + displayError(String)
        + showDetails(Calciatore)
        + hideDetails()
    }

    class AggiungiView {
        + AggiungiView(Controller)
        + select(AggiungiView.Tab)
        + set(MainView.Visualization)
        + getTabView(MainView.Tab): JFrame
    }
}

package DAO {
    interface CalciatoreDAO {
        ---
        + readCalciatori(Filter): List<Calciatore>
        + read(int): Calciatore
        + update(Calciatore): Calciatore
        + delete(Calciatore): void
        + create(Calciatore): Calciatore
    }

    interface SkillsDAO {
        ---
        + readSkillsDi(int): List<Skill>
        + delete(Skill, Calciatore): void
        + create(Skill, Calciatore): void
    }

    interface RuoliDAO {
        ---
        + readRuoliDi(int): List<Ruolo>
        + delete(Ruolo, Calciatore): void
        + create(Ruolo, Calciatore): void
    }

    interface SquadraDAO {
        ---
        + readSquadre(): List<Squadre>
        + update(Squadra, Squadra): Squadra
        + delete(Squadra): void
        + create(Squadra): Squadra
    }

    interface MilitanzaDAO {
        ---
        + readMilitanzeDi(Calciatore): List<Militanza>
        + update(Militanza): Militanza
        + delete(Militanza): void
        + create(Militanza): Militanza
    }

    interface PeriodoDAO {
        + readPeriodiDi(Militanza): List<Militanza>
        + update(Periodo): Periodo
        + delete(Periodo): void
        + create(Periodo): Periodo
    }

    interface TrofeoDAO {
        ---
        + readTrofeiDi(Calciatore): List<TrofeoIndividuale>
        + readTrofeiDi(Squadra): List<TrofeoDiSquadra>
        + delete(Trofeo): void
        + create(Trofeo): Trofeo
    }
}

note left of DAO.SquadraDAO: \
Il metodo ""update()"" prende come primo\n\
argomento la squadra che si vuole sostituire e\n\
come secondo argomento la nuova squadra

package PostgresImplDAO {
    class CalciatorePostgresImplDAO implements DAO.CalciatoreDAO
    class SkillsPostgresImplDAO implements DAO.SkillsDAO
    class RuoliPostgresImplDAO implements DAO.RuoliDAO
    class SquadraPostgresImplDAO implements DAO.SquadraDAO
    class MilitanzaPostgresImplDAO implements DAO.MilitanzaDAO
    class PeriodoPostgresImplDAO implements DAO.PeriodoDAO
    class TrofeoPostgresImplDAO implements DAO.TrofeoDAO
}

package Database {
    class DatabaseConnection {
        + <u>getInstance(): DatabaseConnection
        + getConnection(): Connection
    }
}

PostgresImplDAO ..> Database: <<use>>

package Model {
    enum Ruolo {
        PORTIERE
        DIFENSORE
        CENTROCAMPISTA
        ATTACCANTE
    }

    enum Piede {
        SINISTO
        DESTRO
        AMBIDESTRO
    }

    enum Skill {
        COLPO_DI_TESTA
        TACKLE
        ROVESCIATA
        DRIBBLING
        PASSAGGIO
        TIRO
        CONTROLLO_PALLA
        FINTA
        CROSS
        VELOCITA
        AGILITA
        RESISTENZA
        VISIONE_DI_GIOCO
        POSIZIONAMENTO
        LEADERSHIP
    }

    class Calciatore {
        - id: int
        - nome: String
        - cognome: String
        - dataDiNascita: Date
        - dataDiRitiro: Date?
        - piede: Piede
        - ruoli: ArrayList<Ruolo>
        - skills: ArrayList<Skill>
        ---
        + getNome(): String
        + getCognome(): String
        + getDataDiNascita(): Date
        + getDataDiRitiro(): Optional<Date>
        + getCarriera(): ArrayList<Militanza>
        + getTrofei(): ArrayList<Trofeo>
        + getEtà(): int
        + getSquadraCorrente(): Optional<Squadra>
        + getSkills(): ArrayList<Skill>
        + getPiede(): Piede
        + getRuoli(): ArrayList<Ruolo>
        + getPartiteGiocate():
    }

    class Squadra {
        - nome: String
        - nazionalità: String
        ---
        + getNome(): String
        + getNazionalità(): String
    }

    class Militanza {
        - partiteGiocate: int
        - goalSegnati: int
        ---
        + getPartiteGiocate(): int
        + getGoalSegnati(): int
        + getPeriodi(): ArrayList<Periodo>
    }

    class MilitanzaPortiere {
        - goalSubiti: int
        ---
        + getGaolSubiti(): int
    }

    class Periodo {
        - dataInizio: Date
        - dataFine: Date
        ---
        + getDataInizio(): Date
        + getDataFine(): Date
    }

    abstract class Trofeo {
        - nome: String
        - data: Date
        ---
        + getNome(): String
        + getData(): String
    }

    class TrofeoIndividuale {
        ---
        + getCalciatore(): Calciatore
    }

    class TrofeoDiSquadra {
        ---
        + getSquadra(): Squadra
    }

    interface Utente {
        ---
        + <u>accediComeAmministratore(String)
        + <u>vediElencoCalciatori()
        + <u>vediCaratteristicheCalciatore(Calciatore)
        + <u>filtraPer(Filtro)
    }

    interface Amministratore {
        ---
        + <u>inserisciCalciatore(String, String, Date, Date?, List<Skill>, List<Ruolo>, Piede, List<Militanza>)
        + <u>modificaCalciatore(Calciatore, String, String, Date, Date?, List<Skill>, List<Ruolo>, Piede, List<Militanza>)
        + <u>eliminaCalciatore(Calciatore)
        + <u>logout()
    }

    class Filtro {
        - nome: String
        - ruolo: Ruolo
        - piede: Piede
        - minimoGoalSegnati: Integer
        - massimoGoalSegnati: Integer
        - minimoGoalSubiti: Integer
        - massimoGoalSubiti: Integer
        - minimoEtà: Integer
        - massimoEtà: Integer
        - squadra: Squadra
        ---
        + getNome(): String
        + getRuolo(): Ruolo
        + getPiede(): Piede
        + getMinimoGoalSegnati(): Integer
        + getMassimoGoalSegnati(): Integer
        + getMinimoGoalSubiti(): Integer
        + getMassimoGoalSubiti(): Integer
        + getMinimoEtà(): Integer
        + getMassimoEtà(): Integer
        + getSquadra(): Squadra
    }

    ' Generalizzazioni
    Militanza <|- MilitanzaPortiere
    Trofeo <|-l- TrofeoIndividuale
    Trofeo <|-r- TrofeoDiSquadra
    Utente <|-d- Amministratore

    Calciatore "0..*" -r- "0..*" Squadra: - squadra
    (Calciatore, Squadra) .. Militanza
    Militanza *-l- Periodo: - periodi
    Trofeo "0..*" <-d- "0..*" Calciatore: - trofei
    TrofeoDiSquadra "0..*" -d-> "1" Squadra: - squadra
    TrofeoIndividuale "0..*" -d-> "1" Calciatore: - calciatore

    MilitanzaPortiere -[hidden]- Utente
}

Control.utente ..|> Model.Utente
Control.amministratore ..|> Model.Amministratore

note bottom of Model.Amministratore:\
La lista dei parametri dei metodi ""inserisciCalciatore(...)""\n\
e ""modificaCalciatore(Calciatore, ...)"" sono in ordine:\n\
 - nome: String\n\
 - cognome: String\n\
 - dataDiNascita: Date\n\
 - dataDiRitiro: Date?\n\
 - skills: List<Skill>\n\
 - ruoli: List<Ruolo>\n\
 - piede: Piede\n\
 - carriera: List<Militanza>\n\

@enduml